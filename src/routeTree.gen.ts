/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardProfileIdImport } from './routes/dashboard/profile/$id'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const DashboardIndexLazyImport = createFileRoute('/dashboard/')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexLazyRoute = DashboardIndexLazyImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)

const DashboardProfileIdRoute = DashboardProfileIdImport.update({
  id: '/dashboard/profile/$id',
  path: '/dashboard/profile/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/profile/$id': {
      id: '/dashboard/profile/$id'
      path: '/dashboard/profile/$id'
      fullPath: '/dashboard/profile/$id'
      preLoaderRoute: typeof DashboardProfileIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/dashboard/profile/$id': typeof DashboardProfileIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/dashboard/profile/$id': typeof DashboardProfileIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsLazyRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
  '/dashboard/profile/$id': typeof DashboardProfileIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/settings' | '/dashboard' | '/dashboard/profile/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/dashboard' | '/dashboard/profile/$id'
  id: '__root__' | '/' | '/settings' | '/dashboard/' | '/dashboard/profile/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  DashboardIndexLazyRoute: typeof DashboardIndexLazyRoute
  DashboardProfileIdRoute: typeof DashboardProfileIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  DashboardIndexLazyRoute: DashboardIndexLazyRoute,
  DashboardProfileIdRoute: DashboardProfileIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/settings",
        "/dashboard/",
        "/dashboard/profile/$id"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/settings": {
      "filePath": "settings.lazy.jsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.lazy.jsx"
    },
    "/dashboard/profile/$id": {
      "filePath": "dashboard/profile/$id.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
